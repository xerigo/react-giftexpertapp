{"version":3,"sources":["components/AddCategory.tsx","helpers/GetGifs.tsx","components/GifGridItem.tsx","components/GifGrid.tsx","Hooks/useFetchGif.tsx","GitExpertApp.tsx","index.tsx"],"names":["AddCategory","props","onCategoryAdded","useState","category","setCategory","handleChange","useCallback","evt","target","value","handleSubmit","e","trim","length","preventDefault","onSubmit","type","onChange","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","height","GifGrid","loading","state","setstate","useEffect","then","useFetchGif","gif","GitExpertApp","categories","setCategories","handleAddCategoryClick","newCat","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAMaA,EAAc,SAACC,GAC3B,IACUC,EAAmBD,EAAnBC,gBADX,EAEoCC,mBAAS,IAF7C,mBAEWC,EAFX,KAEqBC,EAFrB,KAGUC,EAAeC,uBACjB,SAACC,GACGH,EAAYG,EAAIC,OAAOC,SAE3B,CAACL,IAICM,EAAeJ,uBAAY,SAACK,GAC3BV,GAAmBE,EAASS,OAAOC,OAAS,GAC3CZ,EAAgBE,GAEpBQ,EAAEG,mBAGF,CAACX,EAAUF,IAEf,OACI,sBAAMc,SAAUL,EAAhB,SACI,uBACIM,KAAK,OACLP,MAAON,EACPc,SAAU,SAACV,GAAD,OAASF,EAAaE,S,uBChCnCW,EAAO,uCAAG,WAAOf,GAAP,uBAAAgB,EAAA,6DAETC,EAFS,yFAE+EC,UAAUlB,GAFzF,qBAGImB,MAAMF,GAHV,cAGTG,EAHS,gBAIQA,EAAKC,OAJb,uBAIPC,EAJO,EAIPA,KACFC,EAAOD,EAAKE,KACd,SAACC,GAAc,MAAQ,CACnBC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAT1B,kBAWRM,GAXQ,4CAAH,sDCOPO,EAAc,SAACjC,GAAkB,IACnC8B,EAAc9B,EAAd8B,MAAOV,EAAOpB,EAAPoB,IACd,OACI,qCACE,6BAAKU,IACL,qBACEI,IAAKd,EACLe,IAAKL,EACLM,OAAO,cCPNC,EAAU,SAACrC,GAAkB,IAC/BG,EAAYH,EAAZG,SAD8B,ECJd,SAACA,GAC3B,IAAD,EAE8BD,mBAAS,CAACuB,KAAM,GAAIa,SAAS,IAF3D,mBAEWC,EAFX,KAEkBC,EAFlB,KAWI,OAPAC,qBAAW,WACPvB,EAAQf,GAAUuC,MAAK,SAACjB,GAAD,OAAUe,EAAS,CAACf,KAAMA,EAAMa,SAAS,SAEnE,CAACnC,IAIKoC,EDNiBI,CAAYxC,GAA7BsB,EAF8B,EAE9BA,KAAMa,EAFwB,EAExBA,QAEb,OACI,gCACI,6BAAKnC,IACHmC,EAAU,cACTb,EAAKE,KAAK,SAACiB,GACP,OAAO,cAAC,EAAD,CAEId,MAAOc,EAAId,MACXV,IAAKwB,EAAIxB,KAFJwB,EAAIf,OAI3B,2BEiBGgB,EA/Ba,SAAC7C,GAC5B,IAAD,EACwCE,mBAAS,CAAC,SADlD,mBACW4C,EADX,KACuBC,EADvB,KAGUC,EAAyB1C,uBAAY,SAAC2C,GAExCF,EAAc,CAACE,GAAF,mBAAaH,OAE1B,CAACA,EAAYC,IAEjB,OACI,qCACA,iDAGA,wEAGA,uBACA,cAAC,EAAD,CAAa9C,gBAAiB+C,IAC7BF,EAAWnB,KAAI,SAACxB,EAAkB+C,GAEjC,OAAO,cAAC,EAAD,CAEL/C,SAAUA,GAFL,UACGA,EADH,YACe+C,W,MC1BhCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.113efd2f.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react'\r\n\r\ninterface Props {\r\n    onCategoryAdded: (newCategory: string) => void;\r\n}\r\n\r\nexport const AddCategory = (props: Props) => \r\n{\r\n    const {onCategoryAdded} = props;\r\n    const [category, setCategory] = useState(\"\");\r\n    const handleChange = useCallback(\r\n        (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n            setCategory(evt.target.value);\r\n        },\r\n        [setCategory],\r\n    )\r\n \r\n\r\n    const handleSubmit = useCallback((e) => {\r\n        if(onCategoryAdded && category.trim().length > 0)\r\n            onCategoryAdded(category);\r\n\r\n        e.preventDefault();\r\n\r\n        },\r\n        [category, onCategoryAdded]\r\n     )    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={category}\r\n                onChange={(evt) => handleChange(evt)} />\r\n\r\n        </form>               \r\n\r\n    )\r\n}\r\n","export const getGifs = async (category: string) =>\r\n    {\r\n        const url = `http://api.giphy.com/v1/gifs/search?api_key=Pb8CuOC0Q9Qrubomp6BaBBvMY0VkfjTX&q=${encodeURI(category)}&limit=5`\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json();\r\n        const gifs = data.map(\r\n            (img: any) => {return  {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images.downsized_medium.url}}\r\n        );\r\n        return gifs;\r\n    };\r\n\r\n    ","import React from 'react'\r\n\r\ninterface Props {\r\n    title: string,\r\n    url:string\r\n}\r\n\r\nexport const GifGridItem = (props: Props) => {\r\n    const {title, url} = props\r\n    return (\r\n        <>\r\n          <h5>{title}</h5>  \r\n          <img \r\n            src={url}\r\n            alt={title}\r\n            height=\"100px\"\r\n            />\r\n        </>\r\n    )\r\n}\r\n","\r\nimport { useFetchGif } from '../Hooks/useFetchGif';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\ninterface Props {\r\n  category: string;\r\n}\r\n\r\nexport const GifGrid = (props: Props) => {\r\n    const {category} = props;\r\n    const {data, loading} = useFetchGif(category);\r\n    \r\n    return (\r\n        <div>\r\n            <h3>{category}</h3>\r\n             {loading ? 'Cargando...' :\r\n               data.map( (gif: any) => { \r\n                   return <GifGridItem \r\n                              key={gif.id} \r\n                              title={gif.title} \r\n                              url={gif.url}/>} )\r\n               }\r\n            <hr/>\r\n        </div>\r\n        \r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/GetGifs\";\r\n\r\n\r\nexport const useFetchGif = (category: string)=>\r\n{\r\n\r\n    const [state, setstate] = useState({data: [], loading: true});\r\n\r\n    useEffect( () => {\r\n        getGifs(category).then((data) => setstate({data: data, loading: false}));\r\n    }\r\n    ,[category])\r\n\r\n\r\n\r\n    return state;\r\n\r\n\r\n\r\n}","import React, { useCallback, useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport const GitExpertApp = (props: Props) => \r\n{\r\n    const [categories, setCategories] = useState(['Test']);\r\n\r\n    const handleAddCategoryClick = useCallback((newCat: string) => \r\n    {\r\n        setCategories([newCat, ...categories]);\r\n        },\r\n        [categories, setCategories],\r\n    );\r\n    return (\r\n        <>\r\n        <h1>\r\n            Gif Expert App!            \r\n        </h1>\r\n        <h2>\r\n            Welcome to new brand gif experience...\r\n        </h2>\r\n        <hr/>\r\n        <AddCategory onCategoryAdded={handleAddCategoryClick}/>\r\n        {categories.map((category: string, index: number) =>\r\n        {\r\n          return <GifGrid \r\n            key={`${category}_${index}`}\r\n            category={category}\r\n            />\r\n        })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GitExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GitExpertApp from './GitExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GitExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}